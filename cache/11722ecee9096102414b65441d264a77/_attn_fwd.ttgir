#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [4, 16], warpsPerCTA = [1, 4], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
#mfma = #triton_gpu.mfma<{version = 2.0, warpsPerCTA = [4, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 2, maxPhase = 8, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 4, perPhase = 2, maxPhase = 8, order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @_attn_fwd_0d1d2d34d5d6de7de8de9c10de11de12de13c14de15de16de17c18de19de20de21c2223de24de(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg3: f32, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg8: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg9: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg10: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg12: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg13: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg14: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg15: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg16: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg17: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg18: i32, %arg19: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg20: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}) attributes {noinline = false} {
    %c128_i32 = arith.constant 128 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant dense<1.000000e+00> : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %cst_0 = arith.constant dense<0xFF800000> : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #mfma>
    %c128_i64 = arith.constant 128 : i64
    %c0_i64 = arith.constant 0 : i64
    %cst_2 = arith.constant 1.44269502 : f32
    %0 = arith.mulf %arg3, %cst_2 : f32
    %1 = tt.splat %0 : (f32) -> tensor<128x128xf32, #blocked>
    %2 = triton_gpu.view_slice %1[0, 96] [128, 32] [1, 1] : tensor<128x128xf32, #blocked> to tensor<128x32xf32, #blocked>
    %3 = triton_gpu.view_slice %1[0, 64] [128, 32] [1, 1] : tensor<128x128xf32, #blocked> to tensor<128x32xf32, #blocked>
    %4 = triton_gpu.view_slice %1[0, 32] [128, 32] [1, 1] : tensor<128x128xf32, #blocked> to tensor<128x32xf32, #blocked>
    %5 = triton_gpu.view_slice %1[0, 0] [128, 32] [1, 1] : tensor<128x128xf32, #blocked> to tensor<128x32xf32, #blocked>
    %6 = tt.get_program_id x : i32
    %7 = arith.muli %6, %c128_i32 : i32
    %8 = arith.extsi %7 : i32 to i64
    %9 = tt.splat %8 : (i64) -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %10 = tt.get_program_id y : i32
    %11 = arith.muli %10, %arg7 : i32
    %12 = tt.addptr %arg0, %11 : !tt.ptr<f16, 1>, i32
    %13 = tt.splat %12 : (!tt.ptr<f16, 1>) -> tensor<128x1x!tt.ptr<f16, 1>, #blocked>
    %14 = arith.extsi %arg8 : i32 to i64
    %15 = tt.splat %14 : (i64) -> tensor<128x1xi64, #blocked>
    %16 = tt.addptr %arg1, %11 : !tt.ptr<f16, 1>, i32
    %17 = arith.extsi %arg11 : i32 to i64
    %18 = tt.addptr %arg2, %11 : !tt.ptr<f16, 1>, i32
    %19 = arith.extsi %arg14 : i32 to i64
    %20 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %21 = arith.extsi %20 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> to tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %22 = arith.addi %9, %21 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %23 = tt.expand_dims %22 {axis = 1 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<128x1xi64, #blocked>
    %24 = arith.muli %23, %15 : tensor<128x1xi64, #blocked>
    %25 = tt.addptr %13, %24 : tensor<128x1x!tt.ptr<f16, 1>, #blocked>, tensor<128x1xi64, #blocked>
    %26 = tt.broadcast %25 : (tensor<128x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<128x128x!tt.ptr<f16, 1>, #blocked>
    %27 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %28 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %29 = arith.extsi %28 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> to tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %30 = tt.expand_dims %29 {axis = 0 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x128xi64, #blocked>
    %31 = tt.broadcast %30 : (tensor<1x128xi64, #blocked>) -> tensor<128x128xi64, #blocked>
    %32 = tt.addptr %26, %31 : tensor<128x128x!tt.ptr<f16, 1>, #blocked>, tensor<128x128xi64, #blocked>
    %33 = triton_gpu.view_slice %32[0, 0] [128, 32] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked> to tensor<128x32x!tt.ptr<f16, 1>, #blocked>
    %34 = triton_gpu.view_slice %32[0, 32] [128, 32] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked> to tensor<128x32x!tt.ptr<f16, 1>, #blocked>
    %35 = triton_gpu.view_slice %32[0, 64] [128, 32] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked> to tensor<128x32x!tt.ptr<f16, 1>, #blocked>
    %36 = triton_gpu.view_slice %32[0, 96] [128, 32] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked> to tensor<128x32x!tt.ptr<f16, 1>, #blocked>
    %37 = tt.load %33 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32xf16, #blocked>
    %38 = tt.load %34 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32xf16, #blocked>
    %39 = tt.load %35 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32xf16, #blocked>
    %40 = tt.load %36 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32xf16, #blocked>
    %41 = arith.extf %37 : tensor<128x32xf16, #blocked> to tensor<128x32xf32, #blocked>
    %42 = arith.extf %38 : tensor<128x32xf16, #blocked> to tensor<128x32xf32, #blocked>
    %43 = arith.extf %39 : tensor<128x32xf16, #blocked> to tensor<128x32xf32, #blocked>
    %44 = arith.extf %40 : tensor<128x32xf16, #blocked> to tensor<128x32xf32, #blocked>
    %45 = arith.mulf %41, %5 : tensor<128x32xf32, #blocked>
    %46 = arith.mulf %42, %4 : tensor<128x32xf32, #blocked>
    %47 = arith.mulf %43, %3 : tensor<128x32xf32, #blocked>
    %48 = arith.mulf %44, %2 : tensor<128x32xf32, #blocked>
    %49 = arith.truncf %45 : tensor<128x32xf32, #blocked> to tensor<128x32xf16, #blocked>
    %50 = arith.truncf %46 : tensor<128x32xf32, #blocked> to tensor<128x32xf16, #blocked>
    %51 = arith.truncf %47 : tensor<128x32xf32, #blocked> to tensor<128x32xf16, #blocked>
    %52 = arith.truncf %48 : tensor<128x32xf32, #blocked> to tensor<128x32xf16, #blocked>
    %53 = triton_gpu.convert_layout %49 : (tensor<128x32xf16, #blocked>) -> tensor<128x32xf16, #shared>
    %54 = triton_gpu.convert_layout %50 : (tensor<128x32xf16, #blocked>) -> tensor<128x32xf16, #shared>
    %55 = triton_gpu.convert_layout %51 : (tensor<128x32xf16, #blocked>) -> tensor<128x32xf16, #shared>
    %56 = triton_gpu.convert_layout %52 : (tensor<128x32xf16, #blocked>) -> tensor<128x32xf16, #shared>
    %57 = triton_gpu.convert_layout %53 : (tensor<128x32xf16, #shared>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
    %58 = triton_gpu.convert_layout %54 : (tensor<128x32xf16, #shared>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
    %59 = triton_gpu.convert_layout %55 : (tensor<128x32xf16, #shared>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
    %60 = triton_gpu.convert_layout %56 : (tensor<128x32xf16, #shared>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
    %61 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>>
    %62 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %63 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %64 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked2>
    %65 = tt.splat %7 : (i32) -> tensor<128xi32, #blocked2>
    %66 = arith.addi %65, %64 : tensor<128xi32, #blocked2>
    %67 = tt.splat %8 : (i64) -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %68 = arith.extsi %27 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>> to tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %69 = arith.extsi %61 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>> to tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #mfma}>>
    %70 = arith.extsi %62 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> to tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %71 = arith.extsi %63 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> to tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %72 = arith.addi %67, %68 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %73 = tt.expand_dims %72 {axis = 1 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128x1xi64, #mfma>
    %74 = tt.expand_dims %69 {axis = 0 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #mfma}>>) -> tensor<1x128xi64, #mfma>
    %75 = tt.expand_dims %70 {axis = 0 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x128xi64, #blocked1>
    %76 = tt.broadcast %74 : (tensor<1x128xi64, #mfma>) -> tensor<128x128xi64, #mfma>
    %77 = tt.expand_dims %71 {axis = 1 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xi64, #blocked1>
    %78 = tt.splat %16 : (!tt.ptr<f16, 1>) -> tensor<128x1x!tt.ptr<f16, 1>, #blocked1>
    %79 = tt.addptr %78, %77 : tensor<128x1x!tt.ptr<f16, 1>, #blocked1>, tensor<128x1xi64, #blocked1>
    %80 = tt.broadcast %79 : (tensor<128x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<128x128x!tt.ptr<f16, 1>, #blocked1>
    %81 = tt.splat %17 : (i64) -> tensor<1x128xi64, #blocked1>
    %82 = tt.splat %18 : (!tt.ptr<f16, 1>) -> tensor<128x1x!tt.ptr<f16, 1>, #blocked1>
    %83 = tt.splat %19 : (i64) -> tensor<1x128xi64, #blocked1>
    %84 = arith.muli %75, %83 : tensor<1x128xi64, #blocked1>
    %85 = tt.broadcast %84 : (tensor<1x128xi64, #blocked1>) -> tensor<128x128xi64, #blocked1>
    %86:5 = scf.for %arg21 = %c0_i32 to %arg20 step %c128_i32 iter_args(%arg22 = %cst_1, %arg23 = %cst, %arg24 = %cst_0, %arg25 = %c0_i64, %arg26 = %c0_i64) -> (tensor<128x128xf32, #mfma>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, i64, i64)  : i32 {
      %106 = tt.splat %arg26 : (i64) -> tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
      %107 = arith.addi %106, %70 : tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
      %108 = tt.expand_dims %107 {axis = 0 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x128xi64, #blocked1>
      %109 = arith.muli %108, %81 : tensor<1x128xi64, #blocked1>
      %110 = tt.broadcast %109 : (tensor<1x128xi64, #blocked1>) -> tensor<128x128xi64, #blocked1>
      %111 = tt.addptr %80, %110 : tensor<128x128x!tt.ptr<f16, 1>, #blocked1>, tensor<128x128xi64, #blocked1>
      %112 = triton_gpu.view_slice %111[0, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
      %113 = triton_gpu.view_slice %111[32, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
      %114 = triton_gpu.view_slice %111[64, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
      %115 = triton_gpu.view_slice %111[96, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
      %116 = tt.load %112 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
      %117 = tt.load %113 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
      %118 = tt.load %114 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
      %119 = tt.load %115 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
      %120 = triton_gpu.convert_layout %116 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared1>
      %121 = triton_gpu.convert_layout %117 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared1>
      %122 = triton_gpu.convert_layout %118 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared1>
      %123 = triton_gpu.convert_layout %119 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared1>
      %124 = triton_gpu.convert_layout %120 : (tensor<32x128xf16, #shared1>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>>
      %125 = tt.dot %57, %124, %cst_1 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<128x128xf32, #mfma>
      %126 = triton_gpu.convert_layout %121 : (tensor<32x128xf16, #shared1>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>>
      %127 = tt.dot %58, %126, %125 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<128x128xf32, #mfma>
      %128 = triton_gpu.convert_layout %122 : (tensor<32x128xf16, #shared1>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>>
      %129 = tt.dot %59, %128, %127 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<128x128xf32, #mfma>
      %130 = triton_gpu.convert_layout %123 : (tensor<32x128xf16, #shared1>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>>
      %131 = tt.dot %60, %130, %129 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<128x128xf32, #mfma>
      %132 = "tt.reduce"(%131) <{axis = 1 : i32}> ({
      ^bb0(%arg27: f32, %arg28: f32):
        %183 = arith.maximumf %arg27, %arg28 : f32
        tt.reduce.return %183 : f32
      }) : (tensor<128x128xf32, #mfma>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %133 = arith.maximumf %arg24, %132 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %134 = tt.expand_dims %133 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128x1xf32, #mfma>
      %135 = tt.broadcast %134 : (tensor<128x1xf32, #mfma>) -> tensor<128x128xf32, #mfma>
      %136 = arith.subf %131, %135 : tensor<128x128xf32, #mfma>
      %137 = tt.extern_elementwise %136 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_exp2f"} : (tensor<128x128xf32, #mfma>) -> tensor<128x128xf32, #mfma>
      %138 = arith.subf %arg24, %133 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %139 = tt.extern_elementwise %138 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_exp2f"} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %140 = tt.expand_dims %139 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128x1xf32, #mfma>
      %141 = tt.broadcast %140 : (tensor<128x1xf32, #mfma>) -> tensor<128x128xf32, #mfma>
      %142 = arith.mulf %arg22, %141 : tensor<128x128xf32, #mfma>
      %143 = tt.splat %arg25 : (i64) -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
      %144 = arith.addi %143, %71 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
      %145 = tt.expand_dims %144 {axis = 1 : i32} : (tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xi64, #blocked1>
      %146 = tt.addptr %82, %145 : tensor<128x1x!tt.ptr<f16, 1>, #blocked1>, tensor<128x1xi64, #blocked1>
      %147 = tt.broadcast %146 : (tensor<128x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<128x128x!tt.ptr<f16, 1>, #blocked1>
      %148 = tt.addptr %147, %85 : tensor<128x128x!tt.ptr<f16, 1>, #blocked1>, tensor<128x128xi64, #blocked1>
      %149 = arith.truncf %137 : tensor<128x128xf32, #mfma> to tensor<128x128xf16, #mfma>
      %150 = triton_gpu.view_slice %149[0, 0] [128, 32] [1, 1] : tensor<128x128xf16, #mfma> to tensor<128x32xf16, #mfma>
      %151 = triton_gpu.view_slice %149[0, 32] [128, 32] [1, 1] : tensor<128x128xf16, #mfma> to tensor<128x32xf16, #mfma>
      %152 = triton_gpu.view_slice %149[0, 64] [128, 32] [1, 1] : tensor<128x128xf16, #mfma> to tensor<128x32xf16, #mfma>
      %153 = triton_gpu.view_slice %149[0, 96] [128, 32] [1, 1] : tensor<128x128xf16, #mfma> to tensor<128x32xf16, #mfma>
      %154 = triton_gpu.convert_layout %150 : (tensor<128x32xf16, #mfma>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
      %155 = triton_gpu.convert_layout %151 : (tensor<128x32xf16, #mfma>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
      %156 = triton_gpu.convert_layout %152 : (tensor<128x32xf16, #mfma>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
      %157 = triton_gpu.convert_layout %153 : (tensor<128x32xf16, #mfma>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>>
      %158 = triton_gpu.view_slice %148[0, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
      %159 = triton_gpu.view_slice %148[32, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
      %160 = triton_gpu.view_slice %148[64, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
      %161 = triton_gpu.view_slice %148[96, 0] [32, 128] [1, 1] : tensor<128x128x!tt.ptr<f16, 1>, #blocked1> to tensor<32x128x!tt.ptr<f16, 1>, #blocked1>
      %162 = tt.load %158 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
      %163 = tt.load %159 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
      %164 = tt.load %160 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
      %165 = tt.load %161 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked1>
      %166 = triton_gpu.convert_layout %162 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared1>
      %167 = triton_gpu.convert_layout %163 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared1>
      %168 = triton_gpu.convert_layout %164 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared1>
      %169 = triton_gpu.convert_layout %165 : (tensor<32x128xf16, #blocked1>) -> tensor<32x128xf16, #shared1>
      %170 = triton_gpu.convert_layout %166 : (tensor<32x128xf16, #shared1>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>>
      %171 = tt.dot %154, %170, %142 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<128x128xf32, #mfma>
      %172 = triton_gpu.convert_layout %167 : (tensor<32x128xf16, #shared1>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>>
      %173 = tt.dot %155, %172, %171 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<128x128xf32, #mfma>
      %174 = triton_gpu.convert_layout %168 : (tensor<32x128xf16, #shared1>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>>
      %175 = tt.dot %156, %174, %173 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<128x128xf32, #mfma>
      %176 = triton_gpu.convert_layout %169 : (tensor<32x128xf16, #shared1>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>>
      %177 = tt.dot %157, %176, %175 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<128x128xf32, #mfma>
      %178 = "tt.reduce"(%137) <{axis = 1 : i32}> ({
      ^bb0(%arg27: f32, %arg28: f32):
        %183 = arith.addf %arg27, %arg28 : f32
        tt.reduce.return %183 : f32
      }) : (tensor<128x128xf32, #mfma>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %179 = arith.mulf %arg23, %139 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %180 = arith.addf %179, %178 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
      %181 = arith.addi %arg25, %c128_i64 : i64
      %182 = arith.addi %arg26, %c128_i64 : i64
      scf.yield %177, %180, %133, %181, %182 : tensor<128x128xf32, #mfma>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>, i64, i64
    }
    %87 = tt.expand_dims %86#1 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128x1xf32, #mfma>
    %88 = tt.broadcast %87 : (tensor<128x1xf32, #mfma>) -> tensor<128x128xf32, #mfma>
    %89 = arith.divf %86#0, %88 : tensor<128x128xf32, #mfma>
    %90 = arith.muli %10, %arg20 : i32
    %91 = tt.addptr %arg4, %90 : !tt.ptr<f32, 1>, i32
    %92 = tt.splat %91 : (!tt.ptr<f32, 1>) -> tensor<128x!tt.ptr<f32, 1>, #blocked2>
    %93 = tt.addptr %92, %66 : tensor<128x!tt.ptr<f32, 1>, #blocked2>, tensor<128xi32, #blocked2>
    %94 = tt.extern_elementwise %86#1 {libname = "libdevice", libpath = "/triton/python/triton/language/../third_party/hip/lib/bitcode/cuda2gcn.bc", pure = true, symbol = "__nv_log2f"} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %95 = arith.addf %86#2, %94 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>
    %96 = triton_gpu.convert_layout %95 : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<128xf32, #blocked2>
    tt.store %93, %96 {cache = 1 : i32, evict = 1 : i32} : tensor<128xf32, #blocked2>
    %97 = tt.addptr %arg5, %11 : !tt.ptr<f16, 1>, i32
    %98 = arith.extsi %arg17 : i32 to i64
    %99 = arith.truncf %89 : tensor<128x128xf32, #mfma> to tensor<128x128xf16, #mfma>
    %100 = tt.splat %98 : (i64) -> tensor<128x1xi64, #mfma>
    %101 = arith.muli %73, %100 : tensor<128x1xi64, #mfma>
    %102 = tt.splat %97 : (!tt.ptr<f16, 1>) -> tensor<128x1x!tt.ptr<f16, 1>, #mfma>
    %103 = tt.addptr %102, %101 : tensor<128x1x!tt.ptr<f16, 1>, #mfma>, tensor<128x1xi64, #mfma>
    %104 = tt.broadcast %103 : (tensor<128x1x!tt.ptr<f16, 1>, #mfma>) -> tensor<128x128x!tt.ptr<f16, 1>, #mfma>
    %105 = tt.addptr %104, %76 : tensor<128x128x!tt.ptr<f16, 1>, #mfma>, tensor<128x128xi64, #mfma>
    tt.store %105, %99 {cache = 1 : i32, evict = 1 : i32} : tensor<128x128xf16, #mfma>
    tt.return
  }
}
